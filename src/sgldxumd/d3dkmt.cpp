#include <sgldxumd/sgldxumd.hpp>

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateDevice(D3DKMT_CREATEDEVICE *pData)
{
    pData->hDevice = 1;
    return STATUS_SUCCESS;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyDevice(CONST D3DKMT_DESTROYDEVICE *pData)
{
    return STATUS_SUCCESS;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateContext(D3DKMT_CREATECONTEXT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyContext(CONST D3DKMT_DESTROYCONTEXT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateAllocation(D3DKMT_CREATEALLOCATION *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateAllocation2(D3DKMT_CREATEALLOCATION *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTQueryResourceInfo(D3DKMT_QUERYRESOURCEINFO *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTOpenResource(D3DKMT_OPENRESOURCE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTOpenResource2(D3DKMT_OPENRESOURCE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyAllocation(CONST D3DKMT_DESTROYALLOCATION *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetAllocationPriority(CONST D3DKMT_SETALLOCATIONPRIORITY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTQueryAllocationResidency(CONST D3DKMT_QUERYALLOCATIONRESIDENCY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateSynchronizationObject(D3DKMT_CREATESYNCHRONIZATIONOBJECT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateSynchronizationObject2(D3DKMT_CREATESYNCHRONIZATIONOBJECT2 *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTOpenSynchronizationObject(D3DKMT_OPENSYNCHRONIZATIONOBJECT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTDestroySynchronizationObject(CONST D3DKMT_DESTROYSYNCHRONIZATIONOBJECT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTWaitForSynchronizationObject(CONST D3DKMT_WAITFORSYNCHRONIZATIONOBJECT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTWaitForSynchronizationObject2(CONST D3DKMT_WAITFORSYNCHRONIZATIONOBJECT2 *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSignalSynchronizationObject(CONST D3DKMT_SIGNALSYNCHRONIZATIONOBJECT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSignalSynchronizationObject2(CONST D3DKMT_SIGNALSYNCHRONIZATIONOBJECT2 *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTLock(D3DKMT_LOCK *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTUnlock(CONST D3DKMT_UNLOCK *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetDisplayModeList(D3DKMT_GETDISPLAYMODELIST *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetDisplayMode(CONST D3DKMT_SETDISPLAYMODE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetMultisampleMethodList(D3DKMT_GETMULTISAMPLEMETHODLIST *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTPresent(D3DKMT_PRESENT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTRender(D3DKMT_RENDER *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetRuntimeData(CONST D3DKMT_GETRUNTIMEDATA *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTQueryAdapterInfo(CONST D3DKMT_QUERYADAPTERINFO *pData)
{
    switch (pData->Type) {
    case KMTQAITYPE_UMDRIVERNAME: {
        D3DKMT_UMDFILENAMEINFO *pResult = (D3DKMT_UMDFILENAMEINFO*)pData->pPrivateDriverData;
        if (pResult->Version != KMTUMDVERSION_DX10 && pResult->Version != KMTUMDVERSION_DX11)
            return STATUS_INVALID_PARAMETER;
        HMODULE hModule = 0;
        BOOL bRet = GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, (LPCTSTR)D3DKMTQueryAdapterInfo, &hModule);
        DWORD dwRet = GetModuleFileNameW(hModule, pResult->UmdFileName, MAX_PATH);
        return STATUS_SUCCESS;
    }
    case KMTQAITYPE_GETSEGMENTSIZE: {
        D3DKMT_SEGMENTSIZEINFO *pResult =
                (D3DKMT_SEGMENTSIZEINFO*)pData->pPrivateDriverData;
        pResult->DedicatedVideoMemorySize = 0;
        pResult->DedicatedSystemMemorySize = 0;
        pResult->SharedSystemMemorySize = 3ULL*1024ULL*1024ULL*1024ULL;
        return STATUS_SUCCESS;
    }
    case KMTQAITYPE_CHECKDRIVERUPDATESTATUS:
        *(BOOL*)pData->pPrivateDriverData = FALSE;
        return STATUS_SUCCESS;
    case KMTQAITYPE_DRIVERVERSION:
        *(D3DKMT_DRIVERVERSION*)pData->pPrivateDriverData = KMT_DRIVERVERSION_WDDM_1_0;
        return STATUS_SUCCESS;
    case KMTQAITYPE_XBOX:
        *(BOOL*)pData->pPrivateDriverData = FALSE;
        return STATUS_SUCCESS;
    case KMTQAITYPE_PHYSICALADAPTERCOUNT:
        *(UINT*)pData->pPrivateDriverData = 1;
        return STATUS_SUCCESS;
    default:
        ZeroMemory(pData->pPrivateDriverData, pData->PrivateDriverDataSize);
        return pData->Type == KMTQAITYPE_PHYSICALADAPTERDEVICEIDS ? STATUS_SUCCESS : STATUS_NOT_IMPLEMENTED;
    }
}

EXTERN_C NTSTATUS APIENTRY D3DKMTOpenAdapterFromHdc(D3DKMT_OPENADAPTERFROMHDC *pData)
{
    pData->hAdapter = 1;
    pData->AdapterLuid.LowPart = 0;
    pData->AdapterLuid.HighPart = 0;
    pData->VidPnSourceId = 1;
    return STATUS_SUCCESS;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTOpenAdapterFromGdiDisplayName(D3DKMT_OPENADAPTERFROMGDIDISPLAYNAME *pData)
{
    pData->hAdapter = 1;
    pData->AdapterLuid.LowPart = 0;
    pData->AdapterLuid.HighPart = 0;
    pData->VidPnSourceId = 1;
    return STATUS_SUCCESS;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTOpenAdapterFromDeviceName(D3DKMT_OPENADAPTERFROMDEVICENAME *pData)
{
    pData->hAdapter = 1;
    pData->AdapterLuid.LowPart = 0;
    pData->AdapterLuid.HighPart = 0;
    return STATUS_SUCCESS;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCloseAdapter(CONST D3DKMT_CLOSEADAPTER *pData)
{
    return STATUS_SUCCESS;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetSharedPrimaryHandle(D3DKMT_GETSHAREDPRIMARYHANDLE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTEscape(CONST D3DKMT_ESCAPE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetVidPnSourceOwner(CONST D3DKMT_SETVIDPNSOURCEOWNER *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetVidPnSourceOwner1(CONST D3DKMT_SETVIDPNSOURCEOWNER1 *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetPresentHistory(D3DKMT_GETPRESENTHISTORY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetPresentQueueEvent(D3DKMT_HANDLE hAdapter, HANDLE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateOverlay(D3DKMT_CREATEOVERLAY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTUpdateOverlay(CONST D3DKMT_UPDATEOVERLAY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTFlipOverlay(CONST D3DKMT_FLIPOVERLAY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyOverlay(CONST D3DKMT_DESTROYOVERLAY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTWaitForVerticalBlankEvent(CONST D3DKMT_WAITFORVERTICALBLANKEVENT *pData)
{
    return STATUS_SUCCESS;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetGammaRamp(CONST D3DKMT_SETGAMMARAMP *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetDeviceState(D3DKMT_GETDEVICESTATE *pData)
{
    switch (pData->StateType) {
    case D3DKMT_DEVICESTATE_EXECUTION:
        pData->ExecutionState = D3DKMT_DEVICEEXECUTION_ACTIVE;
        return STATUS_SUCCESS;
    case D3DKMT_DEVICESTATE_PRESENT:
        pData->PresentState.PresentStats.PresentCount = 0;
        pData->PresentState.PresentStats.PresentRefreshCount = 0;
        pData->PresentState.PresentStats.SyncRefreshCount = 0;
        pData->PresentState.PresentStats.SyncQPCTime.QuadPart = 0;
        pData->PresentState.PresentStats.SyncGPUTime.QuadPart = 0;
        return STATUS_SUCCESS;
    case D3DKMT_DEVICESTATE_RESET:
        pData->ResetState.Value = 0;
        return STATUS_SUCCESS;
    default:
        return STATUS_INVALID_PARAMETER;
    }
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateDCFromMemory(D3DKMT_CREATEDCFROMMEMORY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyDCFromMemory(CONST D3DKMT_DESTROYDCFROMMEMORY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetContextSchedulingPriority(CONST D3DKMT_SETCONTEXTSCHEDULINGPRIORITY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetContextSchedulingPriority(D3DKMT_GETCONTEXTSCHEDULINGPRIORITY *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetProcessSchedulingPriorityClass(HANDLE hProcess, D3DKMT_SCHEDULINGPRIORITYCLASS Priority)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetProcessSchedulingPriorityClass(HANDLE hProcess, D3DKMT_SCHEDULINGPRIORITYCLASS *pPriority)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTReleaseProcessVidPnSourceOwners(HANDLE hProcess)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetScanLine(D3DKMT_GETSCANLINE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTChangeSurfacePointer(CONST D3DKMT_CHANGESURFACEPOINTER *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetQueuedLimit(CONST D3DKMT_SETQUEUEDLIMIT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTPollDisplayChildren(CONST D3DKMT_POLLDISPLAYCHILDREN *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTInvalidateActiveVidPn(CONST D3DKMT_INVALIDATEACTIVEVIDPN *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCheckOcclusion(CONST D3DKMT_CHECKOCCLUSION *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTWaitForIdle(CONST D3DKMT_WAITFORIDLE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCheckMonitorPowerState(CONST D3DKMT_CHECKMONITORPOWERSTATE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C BOOLEAN APIENTRY D3DKMTCheckExclusiveOwnership(VOID)
{
    return FALSE;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCheckVidPnExclusiveOwnership(CONST D3DKMT_CHECKVIDPNEXCLUSIVEOWNERSHIP *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSetDisplayPrivateDriverFormat(CONST D3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSharedPrimaryLockNotification(CONST D3DKMT_SHAREDPRIMARYLOCKNOTIFICATION *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTSharedPrimaryUnLockNotification(CONST D3DKMT_SHAREDPRIMARYUNLOCKNOTIFICATION *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateKeyedMutex(D3DKMT_CREATEKEYEDMUTEX *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTOpenKeyedMutex(D3DKMT_OPENKEYEDMUTEX *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyKeyedMutex(CONST D3DKMT_DESTROYKEYEDMUTEX *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTAcquireKeyedMutex(D3DKMT_ACQUIREKEYEDMUTEX *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTReleaseKeyedMutex(D3DKMT_RELEASEKEYEDMUTEX *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTConfigureSharedResource(CONST D3DKMT_CONFIGURESHAREDRESOURCE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTGetOverlayState(D3DKMT_GETOVERLAYSTATE *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}

EXTERN_C NTSTATUS APIENTRY D3DKMTCheckSharedResourceAccess(CONST D3DKMT_CHECKSHAREDRESOURCEACCESS *pData)
{
    return STATUS_NOT_IMPLEMENTED;
}